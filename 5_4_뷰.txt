VIEW : 가상테이블
 목적 - 재사용이 잦은 SELECT의 단순화, 보안
뷰생성 : CREATE VIEW  
뷰구조변경이나 생성 : CREATE OR REPLACE VIEW
table은 실제 데이터가 저장되지만 view에는 SELECT구문이 저장된다. ALTER VIEW대신 CREATE OR REPLACE로 구조변경한다 
뷰제거 : DROP VIEW 

뷰의 종류 
- 단일 테이블로 구성된 뷰 : 
    CREATE OR REPLACE VIEW product_ice_view
    AS 
    SELECT prod_no, prod_price 
    FROM starbucks.product
    WHERE LOWER(prod_name) LIKE 'ice%';

    SELECT * FROM product_ice_view;
C0002	ice americano	1100
C0004	ice latte	1650

    **DML(INSERT,UPDATE,DELETE)을 VIEW에 사용가능:  ice상품의 가격을 10%인상하시오
    UPDATE product_ice_view SET prod_price=prod_price+prod_price*0.1 WHERE prod_price >=1000;

    SELECT * FROM product;
C0001	americano	1000
C0002	ice americano	1100
C0003	latte	1500
C0004	ice latte	1650

- 여러 테이블로 구성된 뷰 : 
CREATE OR REPLACE VIEW order_view
AS 
SELECT order_info_no AS "주문번호", 
           order_dt "주문일자", 
           order_id "주문자 아이디",
           name "주문자이름",
           order_prod_no, prod_name, prod_price, 
           order_quantity
FROM order_info info JOIN customer c ON (info.order_id = c.id)
                               JOIN order_line line ON (info.order_info_no = line.order_line_no)
                               JOIN product p ON (line.order_prod_no = p.prod_no)
ORDER BY order_info_no DESC;

-- id1고객이 주문한 주문번호, 주문일자, 주문상품번호, 상품명, 가격, 주문수량을 출력하시오
** 공백포함한 컬럼명은 ``백틱으로 처리 
SELECT 주문번호, 주문일자, 
           order_prod_no, prod_name, prod_price, 
           order_quantity
FROM order_view
WHERE `주문자 아이디` = 'id1'; 

--'C0001'상품의 주문번호, 주문일자, 주문자아이디, 주문자이름, 주문수량을 출력하시오
SELECT 주문번호, 주문일자,`주문자 아이디` , 주문자이름, order_quantity
FROM order_view
WHERE order_prod_no = 'C0001';

